using System;
using System.Collections.Generic;

namespace Newtonsoft.Json.Converters
{
    /// <summary>
    /// Converts an <see cref="String"/> or an <see cref="Array"/> property member to a <see cref="IList<String>"/>.
    /// </summary>
    public class StringOrArrayToIListJsonConverter : JsonConverter
    {

        /// <summary>
        /// Determines whether this instance can convert the specified object type to a <see cref="IList<String>"/>.
        /// </summary>
        /// <param name="objectType">Type of the object.</param>
        /// <returns>
        /// <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
        /// </returns>
        public override bool CanConvert(Type objectType)
        {
            return typeof(IList<String>).IsAssignableFrom(objectType);
        }

        /// <summary>
        /// Reads the JSON representation of the object.
        /// </summary>
        /// <param name="reader">The <see cref="JsonReader"/> to read from.</param>
        /// <param name="objectType">Type of the object.</param>
        /// <param name="existingValue">The existing value of object being read.</param>
        /// <param name="serializer">The calling serializer.</param>
        /// <returns>The object value.</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {

            IList<String> resultIList;

            resultIList = new List<String>();

            switch (reader.TokenType)
            {
                case JsonToken.String:
                    resultIList.Add(serializer.Deserialize(reader, typeof(String)) as String);
                    break;
                case JsonToken.StartArray:
                    reader.Read();
                    while (reader.TokenType == JsonToken.String)
                    {
                        resultIList.Add(serializer.Deserialize(reader, typeof(String)) as String);
                        reader.Read();
                    }
                    break;
                default:
                    throw new JsonSerializationException(String.Format("TokenType {0} is not valid in the current context.", reader.TokenType.ToString()));
            }

            return resultIList;
        }

        /// <summary>
        /// Writes the JSON representation of the object.
        /// </summary>
        /// <param name="writer">The <see cref="JsonWriter"/> to write to.</param>
        /// <param name="value">The value.</param>
        /// <param name="serializer">The calling serializer.</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotSupportedException(String.Format("{0} should only be used while deserializing.", this.GetType().ToString()));
        }

        /// <summary>
        /// Gets a value indicating whether this <see cref="JsonConverter"/> can write JSON.
        /// </summary>
        /// <value>
        ///         <c>true</c> if this <see cref="JsonConverter"/> can write JSON; otherwise, <c>false</c>.
        /// </value>
        public override bool CanWrite
        {
            get
            {
                return false;
            }
        }
    }

}
